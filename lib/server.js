// Generated by CoffeeScript 1.4.0
(function() {

  module.exports = function(compound, patterns) {
    var callbacks, client, defaultCallback, fs, logging, oldListeners, path, pattern, redis, registerCallback, sio, _i, _len;
    if (!process.env.NODE_ENV) {
      logging = console;
    } else {
      logging = {
        log: function() {}
      };
    }
    path = require('path');
    fs = require('fs');
    sio = require('socket.io');
    compound.io = sio.listen(compound.server);
    compound.io.set('log level', 2);
    compound.io.set('transports', ['websocket']);
    redis = require('redis');
    client = redis.createClient();
    logging.log('Realtime-adapter : socket.io initialized !');
    oldListeners = compound.server.listeners('request').splice(0);
    compound.server.removeAllListeners('request');
    compound.server.on('request', function(req, res) {
      var filepath, listener, _i, _len, _results;
      if (req.url === '/cozy-realtime-adapter.js') {
        filepath = path.resolve(__dirname, '../lib/client.js');
        res.writeHead(200, {
          'Content-Type': 'text/javascript'
        });
        return fs.createReadStream(filepath).pipe(res);
      } else {
        _results = [];
        for (_i = 0, _len = oldListeners.length; _i < _len; _i++) {
          listener = oldListeners[_i];
          _results.push(listener.call(compound.server, req, res));
        }
        return _results;
      }
    });
    callbacks = {};
    defaultCallback = function(ch, msg) {
      return compound.io.sockets.emit(ch, msg);
    };
    registerCallback = function(pattern, callback) {
      var cbs;
      cbs = callbacks[pattern];
      if (!(cbs != null)) {
        cbs = [];
        client.psubscribe(pattern);
      }
      cbs.push(callback);
      return callbacks[pattern] = cbs;
    };
    client.on('pmessage', function(pattern, ch, msg) {
      var callback, cbs, _i, _len, _results;
      logging.log(pattern, ch, msg);
      cbs = callbacks[pattern];
      _results = [];
      for (_i = 0, _len = cbs.length; _i < _len; _i++) {
        callback = cbs[_i];
        _results.push(callback(ch, msg));
      }
      return _results;
    });
    if (patterns == null) {
      patterns = [];
    }
    for (_i = 0, _len = patterns.length; _i < _len; _i++) {
      pattern = patterns[_i];
      registerCallback(pattern, defaultCallback);
    }
    return {
      on: registerCallback
    };
  };

}).call(this);
